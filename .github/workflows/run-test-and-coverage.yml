name: build and test

on:
  push:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.X'
  WORKING_FOLDER: './ReservationManager.Core.UnitTests'

jobs:
  build-and-test:
    name: Build, Test & Coverage
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Install dependencies
        working-directory: ${{ env.WORKING_FOLDER }}
        run: dotnet restore

      - name: Build
        working-directory: ${{ env.WORKING_FOLDER }}
        run: dotnet build --configuration Release --no-restore

      - name: Unit Test
        working-directory: ${{ env.WORKING_FOLDER }}
        run: dotnet test --no-restore --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: Check Docker availability
        run: |
          echo "Docker version:"
          docker --version
          echo "Docker info:"
          docker info

      - name: Restore, Build, and Run Integration Tests
        run: |
          dotnet restore ReservationManager.Core.IntegrationTests/ReservationManager.Core.IntegrationTests.csproj
          dotnet build ReservationManager.Core.IntegrationTests/ReservationManager.Core.IntegrationTests.csproj --configuration Release --no-restore
          dotnet test ReservationManager.Core.IntegrationTests/ReservationManager.Core.IntegrationTests.csproj --configuration Release --no-restore --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Generate coverage report
        run: |
          reportgenerator \
            -reports:${{ env.WORKING_FOLDER }}/coverage/**/coverage.cobertura.xml \
            -targetdir:${{ env.WORKING_FOLDER }}/coverage-report \
            -reporttypes:Html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ${{ env.WORKING_FOLDER }}/coverage-report

  mutation-testing:
    name: Mutation Testing
    runs-on: ubuntu-latest
    needs: build-and-test  
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install Stryker.NET tool
        run: |
          dotnet tool install --global dotnet-stryker

      - name: Run Mutation Tests
        run: dotnet stryker

      - name: Upload mutation test report
        uses: actions/upload-artifact@v4
        with:
          name: mutation-report
          path: ${{github.workspace}}/StrykerOutput/**/**/*.html
  
  fake-deploy:
    name: Fake Deploy
    runs-on: ubuntu-latest
    needs: mutation-testing 
    steps:
      - name: deploy
        run: printf "deployed"