name: build and test

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.cs'  # Si triggera per modifiche nei file C# (modifica opzionale)

env:
  DOTNET_VERSION: '8.0.X'

jobs:
  determine-changes:
    name: Determine Changed Directories
    runs-on: ubuntu-latest
    outputs:
      services-changed: ${{ steps.changed_dirs.outputs.services-changed }}
      validators-changed: ${{ steps.changed_dirs.outputs.validators-changed }}
    steps:
      - uses: actions/checkout@v3

      - name: Determine changed directories
        id: changed_dirs
        run: |
          echo "Checking for changes in Services and Validators"

          # Verifica se la variabile 'before' è presente per determinare il confronto
          if [ -z "${{ github.event.before }}" ]; then
            # Primo push o nessun commit precedente, confronta con HEAD
            echo "No previous commit found, comparing to HEAD."
            changed_dirs=$(git diff --name-only HEAD | grep -E '^ReservationManager.Core.(Services|Validators)' | cut -d'/' -f1 | sort -u)
          else
            # Controlla se il commit 'before' è valido
            echo "Comparing commits: ${{ github.event.before }} to ${{ github.sha }}"
            git fetch --unshallow  # Aggiungi un fetch per assicurarci di avere la cronologia completa
            # Prova a fare il confronto, gestendo il caso in cui 'before' non sia valido
            changed_dirs=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^ReservationManager.Core.(Services|Validators)' | cut -d'/' -f1 | sort -u)
            if [ $? -ne 0 ]; then
              echo "Failed to find the diff between the commits. Falling back to HEAD."
              changed_dirs=$(git diff --name-only HEAD | grep -E '^ReservationManager.Core.(Services|Validators)' | cut -d'/' -f1 | sort -u)
            fi
          fi

          # Debug: mostra il risultato di git diff
          echo "git diff result: $changed_dirs"

          # Controlla se ci sono cambiamenti
          if [ -z "$changed_dirs" ]; then
            echo "No directories changed."
          fi

          echo "Changed directories: $changed_dirs"

          # Assicurati di identificare correttamente 'Services' e 'Validators'
          services_changed=$(echo $changed_dirs | grep -o 'ReservationManager.Core.Services')
          validators_changed=$(echo $changed_dirs | grep -o 'ReservationManager.Core.Validators')

          # Debug: Verifica le variabili per Services e Validators
          echo "Services changed: $services_changed"
          echo "Validators changed: $validators_changed"

          # Esporta le variabili di ambiente per Services e Validators
          echo "services-changed=$services_changed" >> $GITHUB_ENV
          echo "validators-changed=$validators_changed" >> $GITHUB_ENV

          # Debug: verifica se le variabili di ambiente sono state correttamente impostate
          echo "services-changed variable set to: ${{ env.services-changed }}"
          echo "validators-changed variable set to: ${{ env.validators-changed }}"
  
  
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: determine-changes
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Install dependencies
        working-directory: ./ReservationManager.Core.UnitTests
        run: dotnet restore
      - name: Build
        working-directory: ./ReservationManager.Core.UnitTests
        run: dotnet build --configuration Release --no-restore

  test-services:
    name: Test Services
    runs-on: ubuntu-latest
    needs: determine-changes
    if: ${{ needs.determine-changes.outputs.services-changed == 'ReservationManager.Core.Services' }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Install dependencies
        working-directory: ./ReservationManager.Core.UnitTests.Services
        run: dotnet restore
      - name: Test Services
        working-directory: ./ReservationManager.Core.UnitTests.Services
        run: dotnet test --no-restore --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

  test-validators:
    name: Test Validators
    runs-on: ubuntu-latest
    needs: determine-changes
    if: ${{ needs.determine-changes.outputs.validators-changed == 'ReservationManager.Core.Validators' }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Install dependencies
        working-directory: ./ReservationManager.Core.UnitTests.Validators
        run: dotnet restore
      - name: Test Validators
        working-directory: ./ReservationManager.Core.UnitTests.Validators
        run: dotnet test --no-restore --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

  install-report-generator:
    name: Install Report Generator
    runs-on: ubuntu-latest
    needs: [test-services, test-validators]
    steps:
      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

  generate-coverage-report:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    needs: [test-services, test-validators, install-report-generator]
    steps:
      - name: Generate coverage report
        run: |
          reportgenerator -reports:./coverage/**/coverage.cobertura.xml -targetdir:./coverage-report -reporttypes:Html

  upload-coverage-report:
    name: Upload Coverage Report
    runs-on: ubuntu-latest
    needs: generate-coverage-report
    steps:
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./coverage-report

  fake-deploy:
    name: Fake Deploy
    runs-on: ubuntu-latest
    needs: upload-coverage-report
    steps:
      - name: deploy
        run: printf "deployed"
