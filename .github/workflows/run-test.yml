name: build and test

on:
  push:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.X'
  WORKING_FOLDER: './ReservationManager.Core.Tests'

jobs:
  build-and-test:
    name: build-and-test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3 #scarica da git il sorgente e lo mette nell'ambiente (nel caso ubuntu)
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3 #installa .net nell'ambiente
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install dependencies #lancia comandi da cli per build e test
        working-directory: ${{env.WORKING_FOLDER}}
        run: dotnet restore

      - name: Build
        working-directory: ${{env.WORKING_FOLDER}}
        run: dotnet build --configuration Release --no-restore

      - name: Test
        working-directory: ${{env.WORKING_FOLDER}}
        run: dotnet test --no-restore --verbosity normal  --collect:"XPlat Code Coverage" --collect:"XPlat Code Coverage" --results-directory TestResults

      - name: Installa ReportGenerator
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          dotnet tool list -g

      - name: Genera Report di Coverage
        run: |
          reportgenerator -reports:./ReservationManager.Core.Tests/TestResults/coverage.cobertura.xml \
                   -targetdir:coveragereport \
                   -reporttypes:Html

      - name: Pubblica Report di Code Coverage
        uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Report
          path: coveragereport

  fake-deploy:
    name: fake-deploy
    runs-on: ubuntu-latest
    needs: build-and-test  #se lo step precedente fallisce non viene fatto il deploy dell'applicazione
    
    steps:
      - name: deploy
        run: printf "deployed"
